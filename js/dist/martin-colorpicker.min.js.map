{"version":3,"sources":["martin-colorpicker.min.js"],"names":["mouseup","MOUSE_DOWN","mousedown","distance","a","b","xDiff","yDiff","Math","sqrt","xVal","val","x","INDICATOR_WIDTH","WIDTH","yVal","y","clamp","min","max","valFromY","offset","output","cos","PI","coercePixel","data","pixel","r","g","HEIGHT","makePicker","input","zFill","str","digits","length","template","Martin","width","height","newLayer","background","field","colorpicker","indicator","hue","rect","color","stroke","strokeWidth","circle","radius","mousemove","e","abs","round","toString","value","on","showPicker","picker","parentNode","insertBefore","canvas","loadPicker","inputs","document","getElementsByTagName","forEach","call","getAttribute","registerEffect","this","context","loop","window","addEventListener"],"mappings":"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","file":"martin-colorpicker.min.js","sourcesContent":["var WIDTH = 200,\n    HEIGHT = 200,\n    INDICATOR_WIDTH = 20,\n    MOUSE_DOWN = false;\n\nfunction mouseup() {\n    MOUSE_DOWN = false;\n}\n\nfunction mousedown() {\n    MOUSE_DOWN = true;\n}\n\nfunction distance(a, b) {\n    var xDiff = a[0] - b[0],\n        yDiff = a[1] - b[1];\n    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n\nfunction xVal(val, x) {\n    return (255 - val) * (1 - INDICATOR_WIDTH / (WIDTH + INDICATOR_WIDTH) - x) + val;\n}\n\nfunction yVal(y) {\n    return 255 * y;\n}\n\nfunction clamp(val, min, max) {\n    if ( val > max ) return max;\n    if ( val < min ) return min;\n    return val;\n}\n\nfunction valFromY(y, offset) {\n    var output = Math.cos(2 * Math.PI * (y + offset)) + 0.5;\n    output = clamp(output, 0, 1);\n    return output * 255;\n}\n\nfunction coercePixel(data, x, y, pixel) {\n\n    // normalize X\n    x /= (WIDTH - 1);\n\n    pixel.r = xVal(data.r, x);\n    pixel.g = xVal(data.g, x);\n    pixel.b = xVal(data.b, x);\n\n    // normalize Y\n    y /= (HEIGHT - 1);\n\n    pixel.r -= yVal(y);\n    pixel.g -= yVal(y);\n    pixel.b -= yVal(y);\n\n    pixel.r = clamp(pixel.r, 0, 255);\n    pixel.g = clamp(pixel.g, 0, 255);\n    pixel.b = clamp(pixel.b, 0, 255);\n\n    return pixel;\n}\n\nMartin.registerEffect('colorpicker', function(data) {\n\n    this.context.loop(function(x, y, pixel) {\n        return coercePixel(data, x, y, pixel);\n    });\n});\n\nMartin.registerEffect('indicator', function(data) {\n\n    this.context.loop(function(x, y, pixel) {\n        if ( x > WIDTH ) {\n\n            // normalize Y\n            y = y / (HEIGHT - 1);\n\n            pixel.r = valFromY(y, 0);\n            pixel.g = valFromY(y, 1 / 3);\n            pixel.b = valFromY(y, 2 / 3);\n        }\n\n        return pixel;\n    });\n});\n\nfunction makePicker(input) {\n\n    var template = Martin();\n\n    template.width(WIDTH + INDICATOR_WIDTH).height(HEIGHT);\n\n    template.newLayer();\n\n    template.background('#fff');\n\n    var field = template.colorpicker({\n        r: 255,\n        g: 0,\n        b: 0\n    });\n\n    template.indicator();\n\n    template.newLayer();\n\n    var hue = template.rect({\n        color: '#666',\n        x: WIDTH + 1,\n        y: 1,\n        height: 4,\n        width: INDICATOR_WIDTH - 2,\n        stroke: '#fff',\n        strokeWidth: 2\n    });\n\n    var circle = template.circle({\n        radius: 4,\n        color: '#666',\n        stroke: '#fff',\n        strokeWidth: 2,\n        x: WIDTH,\n        y: 0\n    });\n\n    function zFill(str, digits) {\n        while ( str.length < digits ) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n    template.mousemove(function(e) {\n\n        var x = e.x,\n            y = e.y,\n            data,\n            pixel;\n\n        if ( MOUSE_DOWN ) {\n\n            // change hue\n            if ( x > WIDTH && Math.abs(y - hue.data.y - 0.5 * hue.data.height) < 20 ) {\n\n                // normalize Y\n                y /= HEIGHT - 1;\n\n                data = {\n                    r: valFromY(y, 0),\n                    g: valFromY(y, 1 / 3),\n                    b: valFromY(y, 2 / 3)\n                };\n\n                hue.data.y = e.y - 2;\n                field.data = data;\n\n            } else if ( x <= WIDTH ) {\n\n                // normalize Y\n                y /= HEIGHT - 1;\n\n                data = {\n                    r: valFromY(y, 0),\n                    g: valFromY(y, 1 / 3),\n                    b: valFromY(y, 2 / 3)\n                };\n\n                circle.data.x = e.x;\n                circle.data.y = e.y;\n            }\n\n            if ( data ) {\n                pixel = coercePixel(data, circle.data.x, circle.data.y, {});\n\n                pixel.r = zFill( Math.round(pixel.r).toString(16), 2 );\n                pixel.g = zFill( Math.round(pixel.g).toString(16), 2 );\n                pixel.b = zFill( Math.round(pixel.b).toString(16), 2 );\n\n                input.value = '#' + pixel.r.toString(16) + '' + pixel.g.toString(16) + '' + pixel.b.toString(16);\n            }\n        }\n    });\n\n    template.on('mousedown', mousedown);\n    template.on('mouseup mouseout mouseleave', mouseup);\n\n    return template;\n}\n\nfunction showPicker(input) {\n    var picker = makePicker(input);\n    input.parentNode.insertBefore(picker.canvas, input);\n}\n\nfunction loadPicker() {\n\n    var inputs = document.getElementsByTagName('input');\n    [].forEach.call(inputs, function(input) {\n        if ( input.getAttribute('data-type') === 'martin-colorpicker' ) {\n            showPicker(input);\n        }\n    })\n}\n\nwindow.addEventListener('DOMContentLoaded', loadPicker);\n"],"sourceRoot":"/source/"}